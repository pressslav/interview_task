#run all the scripts in one step

pip pip install -r requirements.txt

mlflow server --backend-store-uri sqlite:///mlflow.db --host 127.0.0.1 --port 5000

python prepare_data.py

python model_training.py --data_path ../kaggle_datasets/telecom_customer_churn.csv --n_estimators 150 --max_depth 20

python model_training.py --data_path ../data/customer_churn_small.csv --n_estimators 150 --max_depth 20

python model_training.py --data_path ../kaggle_datasets/telecom_customer_churn.csv --n_estimators 150 --max_depth 20 --model_output_path ../models/model.pkl

terraform init

terraform apply

docker container ls

pip install --upgrade pip setuptools wheel

#airflow is constrained because of the version of python I run locally
pip install "apache-airflow==2.9.*" \
  --constraint "https://raw.githubusercontent.com/apache/airflow/constraints-2.9.0/constraints-3.9.txt"

airflow db migrate  #to initiate the database (this is a new command that has to be used for the newer versions of airflow instead of 'airflow db init')

airflow standalone #to start the airflow server   (not 'airflow webserver --port 8080' as in the past!)

#once the Airflow UI server is started on port 8080 we need to create a user and a password:
#once again this is changed with the latest airflow because it uses the 'SimpleAuthManager' with a default user:role -> admin:admin
#the initial password is autogenerated and can be found in the logs of the airflow server and in the /airflow/simple_auth_manager_passwords.json
#use 'admin' as username and the autogenerated password as password to login to the UI

#I've manually set the home folder for airflow at '/acronis_interview_v02/airflow'
export AIRFLOW_HOME=~/coding/acronis_interview_v02/airflow


python scripts/model_training.py --data_path kaggle_datasets/telecom_customer_churn.csv --n_estimators 100 --max_depth 10 --top_n_features 20 --mlflow_tracking_uri http://127.0.0.1:5000 --model_output_path models/churn_model.pkl



docker build -t churn-predictor -f Dockerfile .

docker push localhost:5000/churn-predictor:latest

docker tag churn-predictor:latest localhost:5000/churn-predictor:latest

docker run -d -p 8000:8000 churn-predictor

#inspect the logged latency for each predition made and the number of predictions
docker exec $(docker ps -q) cat /app/serve/app.log